// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package oapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// History defines model for History.
type History struct {
	HistoryID *int                `json:"historyID,omitempty"`
	IsrJobID  *openapi_types.UUID `json:"isrJobID,omitempty"`
	Status    *string             `json:"status,omitempty"`
	Timestamp *string             `json:"timestamp,omitempty"`
}

// ListHistoriesResponse defines model for ListHistoriesResponse.
type ListHistoriesResponse struct {
	HasNext   *bool      `json:"hasNext,omitempty"`
	Histories *[]History `json:"histories,omitempty"`
}

// Message defines model for Message.
type Message struct {
	Message *string `json:"message,omitempty"`
}

// ListHistoriesParams defines parameters for ListHistories.
type ListHistoriesParams struct {
	// Limit Maximum number to retrieve at once
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Offset when retrieving
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// UploadImageMultipartBody defines parameters for UploadImage.
type UploadImageMultipartBody struct {
	File *openapi_types.File `json:"file,omitempty"`
}

// UploadImageMultipartRequestBody defines body for UploadImage for multipart/form-data ContentType.
type UploadImageMultipartRequestBody UploadImageMultipartBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /health)
	HealthCheck(w http.ResponseWriter, r *http.Request)

	// (GET /histories)
	ListHistories(w http.ResponseWriter, r *http.Request, params ListHistoriesParams)

	// (POST /images/upload)
	UploadImage(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// (GET /health)
func (_ Unimplemented) HealthCheck(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /histories)
func (_ Unimplemented) ListHistories(w http.ResponseWriter, r *http.Request, params ListHistoriesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /images/upload)
func (_ Unimplemented) UploadImage(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// HealthCheck operation middleware
func (siw *ServerInterfaceWrapper) HealthCheck(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.HealthCheck(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListHistories operation middleware
func (siw *ServerInterfaceWrapper) ListHistories(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListHistoriesParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListHistories(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UploadImage operation middleware
func (siw *ServerInterfaceWrapper) UploadImage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UploadImage(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/health", wrapper.HealthCheck)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/histories", wrapper.ListHistories)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/images/upload", wrapper.UploadImage)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RWTY/bNhD9K8S0t9oWZWcTR7c2BZptmm6RNqd2D2NqZDEVP0KOtmss/N8L0rIdewVj",
	"iyKHPZniI98MZx4f/QDKGe8sWY5QPUBULRnMw7c6sgubNPTBeQqsKQPtDrj+MX3QPRrfEVTlBHjjCSrQ",
	"lmlNAbYT0DH87FZnK4HKV3JVXslpubhqpi/oSk5fv1TL6bwsF7Vq6MVqUcMEGhcMMlTQ9zp9D/SRg7br",
	"xB4ZuY+n3J5sneCR5awNRUbjT3fM5XwxLefTRSnKV9ViWc1fzhbydbkU30kppfj4x5vHbNvDjFt9IsWJ",
	"/xcdeVc0TfEDRe9spJHyYfyV7jkNB4qVcx2hTRztfn+CNZPJg28DNVDBN8WxWcXQqWLfpmNGGAJuxlN8",
	"TzHieiQpcwSOlekt3XtSTLWgEFx4ShnSlLaNS0w1RRW0Z+0sVHBtcE3i995TmH6g6Lo+AeL7364Tr+Yc",
	"8uKiOwpxx1XO5EymAzlPFr2GChazciZhAh65zUcqWsKO2zRcEz/O522GhWpJ/f2XhcwVMIHX9QF+k1CY",
	"QBjamZnnUqYf5SyTzczofadV3lx8iol+f5WeWOqbd08t7ukhbt6JfWqQwQb7jv9TdpfEtdfLSORH4sj5",
	"4jpC9ScMpb9Nc8WJpkdb8ROxOKwa6cXJzco9DmiIKaRg52Tv8V6b3gjbmxUFwU4E4qDpjgSycFYRJIlC",
	"BZ97ChuYgEWTqtxpoxkmX5Tm3NC2k/NgN00TicU/Ldl9mJ37jAVwefHlCLf/U2uXujluUM9IVQcJ7ISl",
	"k1nEovedwzpfNBdH1PUx4wKtyBsE2lp02FvVChQrZNUmkWirAmEkwS2l0w/WM6LGHV92quwMn3uK/IOr",
	"N2cFMn3H2mPgIr1k0xoZL/lCo7tsCodnb6UtZvk8wRe2X1E2hxfm2QhlJ4ykkvQvgcLd3in60EEFLbOv",
	"iqJzCrvWRa6WcikhXb2B4GF/YwcfS/d+mBmov5g5qnJ7u/03AAD//4vdvwdQCQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
